'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _templateObject = _taggedTemplateLiteral(['\n  margin: 5px 15px; \n  pointer-events : ', ';\n  cursor : ', ';\n  background-color:', ';\n'], ['\n  margin: 5px 15px; \n  pointer-events : ', ';\n  cursor : ', ';\n  background-color:', ';\n']),
    _templateObject2 = _taggedTemplateLiteral(['\n  background-color:', ';\n  color : ', ';\n  margin: 5px 15px; \n'], ['\n  background-color:', ';\n  color : ', ';\n  margin: 5px 15px; \n']);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _Wrapper = require('./Wrapper');

var _Wrapper2 = _interopRequireDefault(_Wrapper);

var _Span = require('./Span');

var _Span2 = _interopRequireDefault(_Span);

var _Header = require('./Header');

var _Header2 = _interopRequireDefault(_Header);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var YSpan = _Span2.default.extend(_templateObject, function (props) {
  return props.isMax || props.isMin ? 'none' : 'auto';
}, function (props) {
  return props.isMax || props.isMin ? 'default' : 'pointer';
}, function (props) {
  return props.isMax || props.isMin ? '#eee' : '#fff';
});
var SelectedSpan = _Span2.default.extend(_templateObject2, function (props) {
  return props.isMax ? '#eee' : '#00b9f5';
}, function (props) {
  return props.isMax || props.isMin ? '#000' : 'white';
});
var MonthView = function MonthView(props) {
  var date = props.date,
      format = props.format,
      onMonthChange = props.onMonthChange,
      maxDate = props.maxDate,
      minDate = props.minDate;

  var mainDate = date ? (0, _moment2.default)(date, format || 'DD-MM-YYYY') : (0, _moment2.default)(date || (0, _moment2.default)(), format || 'DD-MM-YYYY').isBetween(minDate || (0, _moment2.default)().subtract(1, 'days'), maxDate || (0, _moment2.default)().add(1, 'days')) ? (0, _moment2.default)() : maxDate && (0, _moment2.default)(maxDate, format || 'DD-MM-YYYY').isSameOrAfter(date) ? (0, _moment2.default)() : minDate && (0, _moment2.default)(minDate, format || 'DD-MM-YYYY').isSameOrBefore(date) ? (0, _moment2.default)() : maxDate ? (0, _moment2.default)(maxDate, format || 'DD-MM-YYYY').subtract(1, 'days') : minDate ? (0, _moment2.default)(minDate, format || 'DD-MM-YYYY').add(1, 'days') : (0, _moment2.default)();
  var endDate = maxDate ? (0, _moment2.default)(maxDate, format || 'DD-MM-YYYY') : null;
  var startDate = minDate ? (0, _moment2.default)(minDate, format || 'DD-MM-YYYY') : null;
  var currentMonth = mainDate.format('MMM');
  var rawMonths = _moment2.default.monthsShort();
  var months = [];
  for (var i = 0; i < rawMonths.length; i++) {
    months.push({
      m: rawMonths[i],
      isMax: endDate ? mainDate.month(rawMonths[i]).isAfter(endDate) : false,
      isMin: startDate ? mainDate.month(rawMonths[i]).isBefore(startDate) : false
    });
  }
  return _react2.default.createElement(
    _Wrapper2.default,
    null,
    _react2.default.createElement(
      _Header2.default,
      null,
      months.map(function (month, k) {
        return currentMonth === month.m ? _react2.default.createElement(
          SelectedSpan,
          {
            isMax: month.isMax,
            isMin: month.isMin,
            key: k,
            onClick: function onClick() {
              return !month.isMax && !month.isMin && onMonthChange(k);
            }
          },
          month.m
        ) : _react2.default.createElement(
          YSpan,
          {
            isMax: month.isMax,
            isMin: month.isMin,
            key: k,
            onClick: function onClick() {
              return !month.isMax && !month.isMin && onMonthChange(k);
            }
          },
          month.m
        );
      })
    )
  );
};

MonthView.propTypes = {
  date: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  format: _propTypes2.default.string,
  maxDate: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  minDate: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  onMonthChange: _propTypes2.default.func
};
exports.default = MonthView;