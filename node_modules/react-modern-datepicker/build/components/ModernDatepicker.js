'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _Label = require('../elements/Label');

var _Label2 = _interopRequireDefault(_Label);

var _Input = require('../elements/Input');

var _Input2 = _interopRequireDefault(_Input);

var _Icon = require('../elements/Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _Container = require('../elements/Container');

var _Container2 = _interopRequireDefault(_Container);

var _CalendarContainer = require('../elements/CalendarContainer');

var _CalendarContainer2 = _interopRequireDefault(_CalendarContainer);

var _CalendarHeading = require('../elements/CalendarHeading');

var _CalendarHeading2 = _interopRequireDefault(_CalendarHeading);

var _SingleArrow = require('../elements/SingleArrow');

var _SingleArrow2 = _interopRequireDefault(_SingleArrow);

var _DoubleArrow = require('../elements/DoubleArrow');

var _DoubleArrow2 = _interopRequireDefault(_DoubleArrow);

var _DateEditor = require('../elements/DateEditor');

var _DateEditor2 = _interopRequireDefault(_DateEditor);

var _CalendarBody = require('../elements/CalendarBody');

var _CalendarBody2 = _interopRequireDefault(_CalendarBody);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ModernDatepicker = function (_Component) {
  _inherits(ModernDatepicker, _Component);

  function ModernDatepicker(props) {
    _classCallCheck(this, ModernDatepicker);

    var _this = _possibleConstructorReturn(this, (ModernDatepicker.__proto__ || Object.getPrototypeOf(ModernDatepicker)).call(this, props));

    _this.state = {
      showContainer: false,
      setViewFor: 'date',
      yearBlock: (0, _moment2.default)().get('year') - 8,
      dateToEdit: props.date ? (0, _moment2.default)(props.date, props.format || 'DD-MM-YYYY').format(props.format || 'DD-MM-YYYY') : '',
      isValid: props.date ? (0, _moment2.default)(props.date, props.format || 'DD-MM-YYYY').isValid() : true,
      isMaxValid: props.maxDate ? (0, _moment2.default)(props.maxDate, props.format || 'DD-MM-YYYY').isValid() : true,
      isMinValid: props.minDate ? (0, _moment2.default)(props.minDate, props.format || 'DD-MM-YYYY').isValid() : true
    };
    _this.handleDateChange = _this.handleDateChange.bind(_this);

    return _this;
  }

  _createClass(ModernDatepicker, [{
    key: 'handleDateChange',
    value: function handleDateChange(value, unit) {
      var _props = this.props,
          format = _props.format,
          onChange = _props.onChange,
          maxDate = _props.maxDate,
          minDate = _props.minDate;
      var yearBlock = this.state.yearBlock;

      var defaultDate = (0, _moment2.default)(this.state.dateToEdit || (0, _moment2.default)(), format || 'DD-MM-YYYY').isBetween(minDate || (0, _moment2.default)().subtract(1, 'days'), maxDate || (0, _moment2.default)().add(1, 'days')) ? (0, _moment2.default)().format(format || 'DD-MM-YYYY') : maxDate && (0, _moment2.default)(maxDate, format || 'DD-MM-YYYY').isSameOrAfter(this.state.dateToEdit) ? (0, _moment2.default)().format(format || 'DD-MM-YYYY') : minDate && (0, _moment2.default)(minDate, format || 'DD-MM-YYYY').isSameOrBefore(this.state.dateToEdit) ? (0, _moment2.default)().format(format || 'DD-MM-YYYY') : maxDate ? (0, _moment2.default)(maxDate, format || 'DD-MM-YYYY').subtract(1, 'days').format(format || 'DD-MM-YYYY') : minDate ? (0, _moment2.default)(minDate, format || 'DD-MM-YYYY').add(1, 'days').format(format || 'DD-MM-YYYY') : (0, _moment2.default)().format(format || 'DD-MM-YYYY');
      var date = (0, _moment2.default)(this.state.dateToEdit || defaultDate, format || 'DD-MM-YYYY').set(unit, value);
      var year = date.get('year');
      var newYearBlock = this.getNewYearBlock(yearBlock, year);
      var dateToEdit = date.format(format || 'DD-MM-YYYY');
      this.setState({
        dateToEdit: dateToEdit,
        yearBlock: newYearBlock
      });
      onChange(dateToEdit);
      if (unit === 'date') {
        this.toggleCalendar(false);
      }
    }
  }, {
    key: 'addDate',
    value: function addDate(value, unit) {
      var _props2 = this.props,
          format = _props2.format,
          onChange = _props2.onChange,
          maxDate = _props2.maxDate,
          minDate = _props2.minDate;
      var _state = this.state,
          yearBlock = _state.yearBlock,
          dateToEdit = _state.dateToEdit;

      var defaultDate = (0, _moment2.default)(this.state.dateToEdit || (0, _moment2.default)(), format || 'DD-MM-YYYY').isBetween(minDate || (0, _moment2.default)().subtract(1, 'days'), maxDate || (0, _moment2.default)().add(1, 'days')) ? (0, _moment2.default)().format(format || 'DD-MM-YYYY') : maxDate && (0, _moment2.default)(maxDate, format || 'DD-MM-YYYY').isSameOrAfter(this.state.dateToEdit) ? (0, _moment2.default)().format(format || 'DD-MM-YYYY') : minDate && (0, _moment2.default)(minDate, format || 'DD-MM-YYYY').isSameOrBefore(this.state.dateToEdit) ? (0, _moment2.default)().format(format || 'DD-MM-YYYY') : maxDate ? (0, _moment2.default)(maxDate, format || 'DD-MM-YYYY').subtract(1, 'days').format(format || 'DD-MM-YYYY') : minDate ? (0, _moment2.default)(minDate, format || 'DD-MM-YYYY').add(1, 'days').format(format || 'DD-MM-YYYY') : (0, _moment2.default)().format(format || 'DD-MM-YYYY');
      var date = (0, _moment2.default)(dateToEdit || defaultDate, format || 'DD-MM-YYYY').add(value, unit);
      var endDate = maxDate ? (0, _moment2.default)(maxDate, format || 'DD-MM-YYYY') : null;
      var startDate = minDate ? (0, _moment2.default)(minDate, format || 'DD-MM-YYYY') : null;
      if (maxDate && date.isAfter(endDate) || minDate && date.isBefore(startDate)) {
        return;
      }
      var year = date.get('year');
      var newYearBlock = this.getNewYearBlock(yearBlock, year);
      var newDateToEdit = date.format(format || 'DD-MM-YYYY');
      this.setState({
        dateToEdit: newDateToEdit,
        yearBlock: newYearBlock
      });
      onChange(newDateToEdit);
    }
  }, {
    key: 'subDate',
    value: function subDate(value, unit) {
      var _props3 = this.props,
          format = _props3.format,
          onChange = _props3.onChange,
          maxDate = _props3.maxDate,
          minDate = _props3.minDate;
      var _state2 = this.state,
          yearBlock = _state2.yearBlock,
          dateToEdit = _state2.dateToEdit;

      var defaultDate = (0, _moment2.default)(this.state.dateToEdit || (0, _moment2.default)(), format || 'DD-MM-YYYY').isBetween(minDate || (0, _moment2.default)().subtract(1, 'days'), maxDate || (0, _moment2.default)().add(1, 'days')) ? (0, _moment2.default)().format(format || 'DD-MM-YYYY') : maxDate && (0, _moment2.default)(maxDate, format || 'DD-MM-YYYY').isSameOrAfter(this.state.dateToEdit) ? (0, _moment2.default)().format(format || 'DD-MM-YYYY') : minDate && (0, _moment2.default)(minDate, format || 'DD-MM-YYYY').isSameOrBefore(this.state.dateToEdit) ? (0, _moment2.default)().format(format || 'DD-MM-YYYY') : maxDate ? (0, _moment2.default)(maxDate, format || 'DD-MM-YYYY').subtract(1, 'days').format(format || 'DD-MM-YYYY') : minDate ? (0, _moment2.default)(minDate, format || 'DD-MM-YYYY').add(1, 'days').format(format || 'DD-MM-YYYY') : (0, _moment2.default)().format(format || 'DD-MM-YYYY');
      var date = (0, _moment2.default)(dateToEdit || defaultDate, format || 'DD-MM-YYYY').subtract(value, unit);
      var endDate = maxDate ? (0, _moment2.default)(maxDate, format || 'DD-MM-YYYY') : null;
      var startDate = minDate ? (0, _moment2.default)(minDate, format || 'DD-MM-YYYY') : null;
      if (maxDate && date.isAfter(endDate) || minDate && date.isBefore(startDate)) {
        return;
      }
      var year = date.get('year');
      var newYearBlock = this.getNewYearBlock(yearBlock, year);
      var newDateToEdit = date.format(format || 'DD-MM-YYYY');
      this.setState({
        dateToEdit: newDateToEdit,
        yearBlock: newYearBlock
      });
      onChange(newDateToEdit);
    }
  }, {
    key: 'getNewYearBlock',
    value: function getNewYearBlock(yearBlock, value) {
      var newYearBlock = void 0;
      var year = value;
      if (year < yearBlock) {
        newYearBlock = year - 15;
      } else if (year > yearBlock + 15) {
        newYearBlock = year;
      } else {
        newYearBlock = yearBlock;
      }
      return newYearBlock;
    }
  }, {
    key: 'onBlur',
    value: function onBlur(e) {
      var _this2 = this;

      var currentTarget = e.currentTarget;
      setTimeout(function () {
        if (!currentTarget.contains(document.activeElement)) {
          _this2.toggleCalendar(false);
        }
      }, 0);
    }
  }, {
    key: 'toggleCalendar',
    value: function toggleCalendar(bool, e) {
      var _props4 = this.props,
          date = _props4.date,
          format = _props4.format,
          onFocus = _props4.onFocus,
          onBlur = _props4.onBlur;

      if (bool && onFocus) {
        onFocus(e);
      } else if (!bool && onBlur) {
        onBlur();
      }
      this.setState({
        showContainer: bool,
        setViewFor: bool ? 'date' : this.state.setViewFor,
        dateToEdit: bool ? date ? (0, _moment2.default)(date, format || 'DD-MM-YYYY').format(format || 'DD-MM-YYYY') : '' : this.state.dateToEdit,
        isValid: date ? (0, _moment2.default)(date, format || 'DD-MM-YYYY').isValid() : this.state.isValid
      });
    }
  }, {
    key: 'openViewFor',
    value: function openViewFor(setViewFor) {
      this.setState({
        setViewFor: setViewFor
      });
    }
  }, {
    key: 'checkAndReturnDate',
    value: function checkAndReturnDate() {
      var _state3 = this.state,
          isValid = _state3.isValid,
          isMaxValid = _state3.isMaxValid,
          isMinValid = _state3.isMinValid;
      var _props5 = this.props,
          format = _props5.format,
          date = _props5.date,
          maxDate = _props5.maxDate,
          minDate = _props5.minDate,
          lang = _props5.lang;

      var currentDate = date ? (0, _moment2.default)(date, format || 'DD-MM-YYYY') : '';
      var startDate = minDate ? (0, _moment2.default)(minDate, format || 'DD-MM-YYYY') : null;
      var endDate = maxDate ? (0, _moment2.default)(maxDate, format || 'DD-MM-YYYY') : null;
      if (!isValid || !isMaxValid || !isMinValid) {
        return 'Invalid date';
      } else if (startDate && endDate && !endDate.startOf('day').isAfter(startDate)) {
        return 'Invalid max/min date';
      } else if (currentDate && startDate && !startDate.startOf('day').isSameOrBefore(currentDate)) {
        return 'Invalid min date';
      } else if (currentDate && endDate && !endDate.startOf('day').isSameOrAfter(currentDate)) {
        return 'Invalid max date';
      } else if (date) {
        _moment2.default.locale(lang || 'en');
        return (0, _moment2.default)(date, format || 'DD-MM-YYYY').format(format || 'DD-MM-YYYY');
      } else {
        return '';
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _state4 = this.state,
          showContainer = _state4.showContainer,
          setViewFor = _state4.setViewFor,
          dateToEdit = _state4.dateToEdit,
          isValid = _state4.isValid,
          yearBlock = _state4.yearBlock;
      var _props6 = this.props,
          format = _props6.format,
          placeholder = _props6.placeholder,
          showBorder = _props6.showBorder,
          className = _props6.className,
          id = _props6.id,
          icon = _props6.icon,
          iconClass = _props6.iconClass,
          maxDate = _props6.maxDate,
          minDate = _props6.minDate,
          label = _props6.label,
          labelClass = _props6.labelClass,
          lang = _props6.lang;

      return _react2.default.createElement(
        _Container2.default,
        { onBlur: function onBlur(e) {
            return _this3.onBlur(e);
          } },
        label && _react2.default.createElement(
          _Label2.default,
          {
            className: labelClass,
            htmlFor: id
          },
          label
        ),
        _react2.default.createElement(_Input2.default, {
          className: className,
          id: id,
          onChange: function onChange(e) {
            return e.preventDefault();
          },
          onFocus: function onFocus(e) {
            return _this3.toggleCalendar(true, e);
          },
          placeholder: placeholder,
          showBorder: showBorder,
          type: 'text',
          value: this.checkAndReturnDate()
        }),
        icon && _react2.default.createElement(_Icon2.default, {
          className: iconClass,
          icon: icon,
          onClick: function onClick() {
            return _this3.toggleCalendar(true);
          }
        }),
        showContainer && isValid && (this.checkAndReturnDate() === '' || (0, _moment2.default)(this.checkAndReturnDate(), format || 'DD-MM-YYYY').isValid()) && _react2.default.createElement(
          _CalendarContainer2.default,
          null,
          _react2.default.createElement(
            _CalendarHeading2.default,
            null,
            _react2.default.createElement(_SingleArrow2.default, {
              left: true,
              onClick: function onClick() {
                return _this3.subDate(1, 'month');
              }
            }),
            _react2.default.createElement(_DoubleArrow2.default, {
              left: true,
              onClick: function onClick() {
                return _this3.subDate(1, 'year');
              }
            }),
            _react2.default.createElement(_DateEditor2.default, {
              date: dateToEdit,
              format: format,
              lang: lang,
              maxDate: maxDate,
              minDate: minDate,
              onDateClick: function onDateClick() {
                return _this3.openViewFor('date');
              },
              onMonthClick: function onMonthClick() {
                return _this3.openViewFor('month');
              },
              onYearClick: function onYearClick() {
                return _this3.openViewFor('year');
              },
              viewFor: setViewFor
            }),
            _react2.default.createElement(_SingleArrow2.default, { onClick: function onClick() {
                return _this3.addDate(1, 'month');
              } }),
            _react2.default.createElement(_DoubleArrow2.default, { onClick: function onClick() {
                return _this3.addDate(1, 'year');
              } })
          ),
          _react2.default.createElement(_CalendarBody2.default, {
            date: dateToEdit,
            format: format,
            maxDate: maxDate,
            minDate: minDate,
            onChange: function onChange(value, unit) {
              return _this3.handleDateChange(value, unit);
            },
            viewFor: setViewFor,
            yearBlock: yearBlock
          })
        )
      );
    }
  }]);

  return ModernDatepicker;
}(_react.Component);

ModernDatepicker.propTypes = {
  className: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  date: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  format: _propTypes2.default.string,
  iconClass: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  id: _propTypes2.default.string,
  label: _propTypes2.default.string,
  labelClass: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  lang: _propTypes2.default.string,
  maxDate: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  minDate: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  onBlur: _propTypes2.default.func,
  onChange: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,
  placeholder: _propTypes2.default.string,
  showBorder: _propTypes2.default.bool
};

exports.default = ModernDatepicker;